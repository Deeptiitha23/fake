pipeline {
    agent any

    environment {
        // Define directories for Terraform and Ansible
        TERRAFORM_DIR = "${WORKSPACE}/terraform"
        ANSIBLE_DIR = "${WORKSPACE}/ansible"
        // Define your GitHub repositories
        TERRAFORM_REPO = "https://github.com/Deeptiitha23/jenkins.git"
        ANSIBLE_REPO = "https://github.com/Deeptiitha23/jenkins.git"
    }

    stages {
        stage('Clone Repositories') {
            steps {
                // Clone the Terraform repository
                dir(TERRAFORM_DIR) {
                    git branch: 'main', url: TERRAFORM_REPO
                }
                // Clone the Ansible repository
                dir(ANSIBLE_DIR) {
                    git branch: 'main', url: ANSIBLE_REPO
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir(TERRAFORM_DIR) {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Update Ansible Inventory') {
            steps {
                script {
                    // Capture the Terraform output
                    def privateIps = sh(script: "cd ${TERRAFORM_DIR} && terraform output -json private_ips", returnStdout: true).trim()
                    echo "Private IPs: $privateIps"
                    // Parse private IPs as JSON
                    def ips = readJSON text: privateIps
                    echo "Parsed IPs: $ips"
                    // Generate the Ansible inventory file
                    generateInventory(ips)
                }
            }
        }

        // stage('Clear Known Hosts') {
        //     steps {
        //         sh 'rm -f ~/.ssh/known_hosts'
        //     }
        // }

        // stage('ssh connections'){
        //     steps{
        //         ansiblePlaybook disableHostKeyChecking: true, installation: 'ansible', playbook: "${ANSIBLE_DIR}/playbook.yml", vaultCredentialsId: '36e1bec6-508e-4b2c-8754-e35f1fa3dc59', vaultTmpPath: ''
        //     }
        // }
        
        stage('Run Ansible Playbook') {
            steps {
                script {
                    dir(ANSIBLE_DIR) {
                        sh 'ansible-playbook -i inventory.ini playbook.yml'
                    }
                }
            }
        }
    }
}

def generateInventory(privateIps) {
    // Generate inventory content
    def inventoryContent = """
        [master]
        master ansible_host=${privateIps.master ?: ''} ansible_user=ubuntu
        
        [worker]
        worker ansible_host=${privateIps.worker ?: ''} ansible_user=ubuntu
        
        [all:vars]
        ansible_python_interpreter=/usr/bin/python3
    """
    // Write inventory content to file
    writeFile file: "${ANSIBLE_DIR}/inventory.ini", text: inventoryContent
}
