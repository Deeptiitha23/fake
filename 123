pipeline {
    agent any

    environment {
        // Define directories for Terraform and Ansible
        TERRAFORM_DIR = "${WORKSPACE}/terraform"
        ANSIBLE_DIR = "${WORKSPACE}/ansible"
        // Define your GitHub repositories
        TERRAFORM_REPO = "https://github.com/Deeptiitha23/k8.git"
        ANSIBLE_REPO = "https://github.com/Deeptiitha23/k8.git"
    }

    stages {
        stage('Clone Repositories') {
            steps {
                // Clone the Terraform repository
                dir(TERRAFORM_DIR) {
                    git branch: 'main', url: "https://github.com/Deeptiitha23/k8.git"
                }
                // Clone the Ansible repository
                dir(ANSIBLE_DIR) {
                    git branch: 'main', url: "https://github.com/Deeptiitha23/k8.git"
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir(TERRAFORM_DIR) {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Update Ansible Inventory') {
            steps {
                script {
                    // Capture the Terraform output
                    def privateIps = sh(script: "cd ${TERRAFORM_DIR} && terraform output -json private_ips", returnStdout: true).trim()
                    echo "$privateIps"
                   // def ips = readJSON text: privateIps
                   // echo "$ips"
                    // sh """
                    //     echo '[master]' > ${ANSIBLE_DIR}/inventory
                    //     echo $(echo '${privateIps}' jq -r '.master') >> ${ANSIBLE_DIR}/inventory
                    //     echo '' >> ${ANSIBLE_DIR}/inventory
                    //     echo '[worker]' > ${ANSIBLE_DIR}/inventory
                    //     echo $(echo '${privateIps}' jq -r '.worker') >> ${ANSIBLE_DIR}/inventory
                    //     """
                    // Generate the Ansible inventory file
                    writeFile file: "${ANSIBLE_DIR}/inventory", text: generateInventory(ips)
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    dir(ANSIBLE_DIR) {
                        sh 'ansible-playbook -i inventory playbook.yml'
                    }
                }
            }
        }
    }
}

def generateInventory(privateIps) {
    def engine = new groovy.text.SimpleTemplateEngine()
    def template = new File("${env.ANSIBLE_DIR}/inventory.tpl").text
    def binding = [private_ips: privateIps]
    return engine.createTemplate(template).make(binding).toString()
}
